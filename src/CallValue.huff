
/**
 *  CALL_VALUE HUFF EXERCISE
 *
 *
 *  When a user sends a transaction to a smart contract, they can include value (ether). msg.value in solidity
 *
 *  The task is to write within the `MAIN` macro below, huff code to get and return the amount of ether sent as part of that call 
*/

#define macro MAIN() = takes(0) returns(0) {
    /**
      @notice Load msg.value onto the stack
    **/
    callvalue // [value]

    /**
      @notice Store value in memory, mstore takes two arguments [offset, value]
    **/
    0x00      // [0x00, value]
    mstore    // []

    /**
      @notice Return first 32 bytes, return takes two arguments [offset, length]
              Since msg.value is a fixed length element (uint256), 
              return the first 32bytes slot is enough
    **/
    0x20      // [0x20]
    0x00      // [0x00, 0x20]
    return    // []
}
