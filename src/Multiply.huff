
/** 
 *  MULTIPLY HUFF EXERCISE
 *
 *  When writing solidity, we most times have to perform some mathematical operations like multiplication etc
 *  
 *  The task is to write within the `MAIN` macro below, a function named `multiply` that takes in 2 uint256s, and returns their product. Be sure to revert on overflow
 *
 *  NOTICE: The contract should revert when an unrecognized function is called
 */
/** INTERFACE **/
#define function multiply(uint256, uint256) payable returns(uint256)

/** MACROS and FUNCTIONS **/
#define macro MULTIPLY() = takes(0) returns(0) {
    /**
      @notice Load first input data from calldata
              - data offset is 0x04 due to func selector
    **/
    0x04          // [0x04]
    calldataload  // [inputOne]

    /**
      @notice Load second input data from calldata
              - data offset is 0x24 due to func selector + first slot
              - duplicate inputTwo -> One will be consumed by multiplication, 
                                      the other by overflow check
    **/
    0x24          // [0x24, inputOne]
    calldataload  // [inputTwo, inputOne]

    /**
      @notice Duplicate both inputs -> One will be consumed by multiplication, 
                                      the other by overflow check
    **/
    dup1          // [inputTwo, inputTwo, inputOne]
    dup3          // [inputOne, inputTwo, inputTwo, inputOne]

    /**
      @notice Multiply
    **/
    mul           // [result, inputTwo, inputOne]

    /**
      @notice return 0 if result is 0
    **/
    dup1          // [result, result, inputTwo, inputOne]
    0x00          // [0x00, result, result, inputTwo, inputOne]
    eq            // [0x00 == result, result, inputTwo, inputOne]
    return0Jump   // [return0Jumpdest, 0x00 == result, result, inputTwo, inputOne]
    jumpi         // [result, inputTwo, inputOne]

    /**
      @notice Before performing checks, place elements in the right order
    **/
    swap1         // [inputTwo, result, inputOne]
    dup2          // [result, inputTwo, result, inputOne]

    /**
      @notice Perform first overflow check
    **/
    lt            // [result < inputTwo, result, inputOne]
    revertJump    // [revertJumpDest, result < inputTwo, result, inputOne]
    jumpi         // [result, inputOne]

    /**
      @notice Before performing second check, swap position and duplicate the result to eventually return
    **/
    swap1          // [inputOne, result]
    dup2           // [result, inputOne, result]

    /**
      @notice Perform second overflow check
    **/
    lt            // [result < inputOne, result]
    revertJump    // [revertJumpDest, result < inputOne, result]
    jumpi         // [result]

    /**
      @notice Store result in memory
    **/
    0x00          // [0x00, result]
    mstore        // []

    /**
      @notice Return value
    **/
    0x20 0x00 return

    /**
      @notice Revert JUMPDEST
    **/
    revertJump:
        0x20 0x00 revert
    return0Jump:
        0x20 0x00 return
}

#define macro MAIN() = takes(0) returns(0) {
    /**
      @notice Load function selector, first 4 bytes
              - push 0x00, offste for call data load
              - load first 32 bytes
              - push 0xe0, number of bits (224) necessary to shift right of 28 bytes, 
                leaving only the 4 significant bytes of the selector
    **/
    0x00             // [0x00]
    calldataload     // [0xA...]
    0xe0             // [0xe0, 0xA...]
    shr              // [0x00...00A...]

    /**
      @notice Jump to the add1 function if selector corresponds
              - compute func selector
              - check if received and computed selector are equal, 
                eq takes first two elements of the stack
              - jumpi takes two elements ProgramCounter (bytes offset in code, must be a JUMPDEST)
                and condition [PC, condition], if condition == 0 the code will continue from a next line
    **/
    __FUNC_SIG(multiply) // [computed_selector, 0x00...00A...]
    eq               // [computed_selector == 0x00...00A...]
    multiplyJump     // [multiplyJumpOffset, computed_selector == 0x00...00A...]
    jumpi            // []

    /**
      @notice Revert if there is no match
    **/
    0x20 0x00 revert

    /**
      @notice list of JUMPDESTs
    **/
    multiplyJump:
      MULTIPLY()
}